C:

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, q;
    scanf("%d %d", &n, &q);

    // Create array of pointers to int arrays (sequences)
    int** seq = (int**)malloc(n * sizeof(int*));
    int* sizes = (int*)calloc(n, sizeof(int));     // Track sizes
    int* capacities = (int*)calloc(n, sizeof(int)); // Track capacities

    for (int i = 0; i < n; i++) {
        seq[i] = NULL;
        sizes[i] = 0;
        capacities[i] = 0;
    }

    int lastAnswer = 0;
    for (int i = 0; i < q; i++) {
        int type, x, y;
        scanf("%d %d %d", &type, &x, &y);
        int idx = (x ^ lastAnswer) % n;

        if (type == 1) {
            // Resize if needed
            if (sizes[idx] == capacities[idx]) {
                capacities[idx] = capacities[idx] == 0 ? 1 : capacities[idx] * 2;
                seq[idx] = (int*)realloc(seq[idx], capacities[idx] * sizeof(int));
            }
            seq[idx][sizes[idx]++] = y;
        } else if (type == 2) {
            lastAnswer = seq[idx][y % sizes[idx]];
            printf("%d\n", lastAnswer);
        }
    }

    // Free memory
    for (int i = 0; i < n; i++) {
        free(seq[i]);
    }
    free(seq);
    free(sizes);
    free(capacities);

    return 0;
}

Python:

n, q = map(int, input().split())
arr = [[] for _ in range(n)]
lastAnswer = 0

for _ in range(q):
    t, x, y = map(int, input().split())
    idx = (x ^ lastAnswer) % n
    if t == 1:
        arr[idx].append(y)
    else:
        lastAnswer = arr[idx][y % len(arr[idx])]
        print(lastAnswer)
